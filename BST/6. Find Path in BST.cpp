/*
Given a BST and an integer k. Find and return the path from the node with data k and root (if a node with data k is present in given BST) in a list. 
Return empty list otherwise.
Note: Assume that BST contains all unique elements.

Sample Input 1:
8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1
2
Sample Output 1:
2 5 8
*/





****************************************************************************************************************************************************************************
****************************************************************************************************************************************************************************
****************************************************************************************************************************************************************************
****************************************************************************************************************************************************************************

//solution:
***********

//T.C = O(H)
//S.C = O(H)

vector<int>* getPath(BinaryTreeNode<int> *root , int data) 
{
   // Write your code here
   //base case
   if (root == NULL)
      return NULL;
    
   if (root->data == data)
   {
      vector<int> *v = new vector<int>();
      v->push_back(root->data);
      return v;
   }
   else if (root->data > data)
   {
      vector<int> *left = getPath(root->left, data);
      if (left != NULL)
         left->push_back(root->data);
      return left;
   }
   else if (root->data < data)
   {
      vector<int> *right = getPath(root->right, data);
      if (right != NULL)
         right->push_back(root->data);
      return right;
   }
}





****************************************************************************************************************************************************************************
****************************************************************************************************************************************************************************

//main-code:
------------

#include <iostream>
#include <queue>
using namespace std;


template <typename T>
class BinaryTreeNode 
{
};



BinaryTreeNode<int> *takeInput()
{
}



int main() 
{
   BinaryTreeNode<int> *root = takeInput();
   int k;
   cin >> k;
   vector<int> *output = getPath(root, k);

   if (output != NULL) 
   {
      for (int i = 0; i < output->size(); i++) 
      {
         cout << output->at(i) << " ";
      }
   }
   delete root;
}






****************************************************************************************************************************************************************************
****************************************************************************************************************************************************************************
****************************************************************************************************************************************************************************
****************************************************************************************************************************************************************************












