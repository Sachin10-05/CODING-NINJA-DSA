/*
problem:
********
For a given Binary Tree of integers, find and return the height of the tree.
Ex-                10
                 /    \
                20    30
               /  \
              40  50
Sample Input 1:
10 20 30 40 50 -1 -1 -1 -1 -1 -1
Sample Output 1:
3

Sample Input 2:
3 -1 -1
Sample Output 2:
1
*/





*****************************************************************************************************************************************************************************
*****************************************************************************************************************************************************************************

//solution:
************

#include <iostream>
#include <queue>
using namespace std;

template <typename T>
class BinaryTreeNode
{
};


BinaryTreeNode<int>* takeInput()
{
}



int height(BinaryTreeNode<int>* root)
{
    //base case
    if(root == NULL)
        return 0;
    
    int left_height = height(root->left);
    int right_height = height(root->right);
    
    int ans = max(left_height, right_height) + 1;
    return ans;
}




int main() 
{
   BinaryTreeNode<int>* root = takeInput();
   cout << height(root);
}








*****************************************************************************************************************************************************************************
*****************************************************************************************************************************************************************************

//Iterative method
*******************

int height(BinaryTreeNode<int>* root)
{
   if(root == NULL)
      return 0;
		
   queue<BinaryTreeNode<int>*> q;
   q.push(root);
   int h = 0;
   while(q.size() != 0)
   {
      int size = q.size();
	  while(size--)
	  {
	     BinaryTreeNode<int>* front = q.front();
		 q.pop();
		 if(front->left)
		    q.push(front->left);
				
		 if(front->right)
		    q.push(front->right);
	  }
	  h++;
   }
   return h;
}






*****************************************************************************************************************************************************************************
*****************************************************************************************************************************************************************************
*****************************************************************************************************************************************************************************
*****************************************************************************************************************************************************************************























