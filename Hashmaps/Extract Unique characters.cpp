/*
problem:
--------
Given a string S, you need to remove all the duplicates. That means, the output string should contain each character only once. 
The respective order of characters should remain same, as in the input string.

Constraints :
    0 <= Length of S <= 10^8
    Time Limit: 1 sec

Sample Input 1 :
ababacd
Sample Output 1 :
abcd

Sample Input 2 :
abcde
Sample Output 2 :
abcde
*/






**********************************************************************************************************************************************************************
**********************************************************************************************************************************************************************
**********************************************************************************************************************************************************************
**********************************************************************************************************************************************************************

//solution-1:
-------------

#include<unordered_map>
string uniqueChar(string str)
{
    string ans;
    unordered_map<char, int> freq;
    for(int i=0;i<str.length();i++)
    {
        freq[str[i]]++;
    }

    for(int i=0;i<str.length();i++)
    {
        if(freq[str[i]] != 0)
        {
            ans += str[i];
            freq[str[i]] = 0;
        }
    }
    return ans;
}






**********************************************************************************************************************************************************************
**********************************************************************************************************************************************************************

//solution-2:
-------------

//using unordered map
#include <unordered_map>
string uniqueChar(string str)
{
    // Write your code here
    string s;
    unordered_map<char, int> m;
    for (int i = 0; i < str.length(); i++)
    {
        if (m.count(str[i]) == 0)
        {
            m[str[i]]++;
            s += str[i];
        }
    }
    return s;
}






**********************************************************************************************************************************************************************
**********************************************************************************************************************************************************************
**********************************************************************************************************************************************************************
**********************************************************************************************************************************************************************











